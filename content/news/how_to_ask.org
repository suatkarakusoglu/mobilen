#+title: Soru Sormak
#+date: [2023-10-27 Fri]
#+author: Suat Karakuşoğlu
#+filetags: :İletişim:

[[https://tr.linkedin.com/in/suat-karakusoglu][Suat Karakuşoğlu]] yazdı.

* İçerik
Merhaba, ufak bir kızım var biraz büyüyüp ayaklanmaya başladı ve hemen *bu ne?* soruları ile muhattap olmaya başladık :).

Merak ve öğrenme ihtiyacı ne kadar da erkenden başlıyor.

Hayatımızda bu kadar erken başlayan bir ihtiyacı nasıl verimli ve etkin bir şekilde beslemeliyiz diyince bocalayabiliyoruz.

İşte soru sormanın en saf hali olan *bu ne?* den, karmaşıklaşan ilişkilerimizi yönetmeye başladığımız yetişkinliğe geçişte hepimiz farklı bir dönüşüm geçişiyoruz; bunun arkasında elbette tecrübelerimiz ve türlü psikolojiler büyük rol oynuyor.

Bir de yazılım gibi bir dünyada iseniz sorunuzun cevabına hangi kaynaklardan, nasıl faydalanarak erişebileceğimiz gibi konular çok çatallı bir yola gidebiliyor.

** Neyi sormak?
Sormak çok ucuz ve basit bir eylem. Efor alan ise cevaba erişebilmek.

Tek taraflı bir eylem kesinlikle değil, muhattabından efor isteyen bir eylem.

O nedenle bu çabayı neden sizin için göstermeli? Sorunuzu sorarken nasıl karşımızdakine yardımcı olabiliriz?

** Kendimize sormak != Deli misin?
Kişinin kendisi ile konuşma ihtiyacı kafasındaki fikirleri ve soruları netleştirmesine yardımcı olan çok faydalı bir yol.

O nedenle sorunun muhatabı ilk önce kendimiziz.

Bu durumda düşüncelerimizi daha berrak hale getirebilmek için onu kendimize anlatmaya çalışabiliriz.

Literatürde [[https://en.wikipedia.org/wiki/The_Pragmatic_Programmer][The Pragmatic Programmer]] kitabında da ele alınan [[https://rubberduckdebugging.com/][rubber duck debugging/talking]] olarak geçen bu sohbet bizim kültürümüze nedense *deli misin* olarak evrilmiş.

*** Deliyiz
Karşılaştığımız bir sorunu karşımıza bir oyuncak ördek alıp ona anlatmaya çalışarak sorunla ilgili daha güzel bir zemin oluşturabiliriz.

Ya da kafamıza bir huni takip ayna karşısına geçip sorunla ilgili sesli bir şekilde kendimizle konuşabiliriz.

Bu alışkanlığı normalleştirene kadar dillendireceğim sanırım.

** Sormadan önce neler yapmalıyız?
Kendimizle olan sohbetimiz bir yerde tat vermemeye başladığında başka bir muhattap arayabiliriz.

Ancak araştırmamızı netleştirip, hazırlıklı sorduğumuz sorular kişilerin vaktine saygı duyduğumuzu ve aklımıza gelen her soruyu öyle gelişigüzel sormadığımızı hissettirmemiz önemli.

En yakınımızdan uzağa doğru araştırmaya başlamalıyız.

Bunun için önce netleştirdiğimiz sorunun bağlamına dokunan dokümanlara erişip, kurcalamalıyız.

Örnek kullanımlarını görebileceğin, aynı sorunla karşılaşmış veya ihtiyacı olması muhtemel, takım içinde veya cross takımlardaki diğer projeleri inceleyebiliriz. Bu sayede diğer takımlara erişerek çözümü nasıl tatbik ettikleri konusunda yardım alma ihtimalinizde yüksek olacaktır.

Elimizin altındaki hızlıca sistemin manuel/kitapçığında tarama yapabiliriz; bu çağırdığımız bir fonksiyonun dokümantasyonuna bakmak ve hatta kaynak koduna erişip nasıl çalıştığını yorumlayabilmek olabilir.

Sonrasında ise açık kaynak repolarda araştırma yaparak oralardaki çözümleri görebilmek bakış açımızı genişletecektir.
En çok çıkan bilgi kaynaklarından 'Large Language Model'ler de danışılabilecek birer kaynak olarak hayatımıza girdi. Bu araçları günlük çalışma hayatımıza entegre etmenin yollarını bulmalıyız.

İnternet üzerinden bulduğunuz ve sizin probleminize çözüm olabilecek seçeneklerinizi not alarak belki hangisini seçmenin sizin projenizin/şirketin stratejinize uyup uymadığını değerlendirebileceksiniz.
Sorduğunuz sorunun zihinleri tetikleyecek tatta olması, çözümüde daha keyifli kılacaktır.

** Araştırmaları sunmak
Soruna dair kendi araştırmalarınızı tamamladıktan sonra bunları karşı tarafa sunmamız ve bu sorunu beraber çözmek istediğimizi söylememiz gerekiyor.

Ancak dikkat etmemiz gereken noktalardan bir tanesi yakın hissettiğimiz çözüme; yani *kendi aklımızdaki çözüme yönelik şekilde soruyu aktarmamak*. Soru en yalın şekliyle aktarılmaz ise soruyu soranın tıkandığı yerdeki bakış açısından belki çıkamayacak şekilde karşı taraf da bir çıkmaza girebilir.

Sorun ile ilgili mümkün mertebe ekran görüntüleri yerine kopyalanabilir metinler ile yorum katmadan logların paylaşılması gibi pratikleri izlemeliyiz.

** Nerede sormak?
Sorunun tartışılacağı ortamı doğru bulabilme için ise dua ile başlıyoruz :)

#+begin_quote
Sorumun *gürültüye sebep vermeyecek* şekilde tartışılacağı kadar =dar= çevreyi bulmak için güç; *Cevaba en yakın zamanda erişebilmeyi* sağlayabilecek kadar =geniş= çevreyi bulmak için sabır, ikisini yapabilmek için akıl ver.
#+end_quote

*** Ne kadar dar/geniş çerçevede sorunu tartışabiliriz?
Remote çalışma ile bu konu biraz daha önemli hale geldi. Çünkü toplantı mecraları ve zamanları çok daha dinamik hale geldi.
Bu kadar dinamiklik daha iyi yönetilmeyi gerektiriyor. Bir anda 100 kişinin içinde bulunduğu bir toplantıda kendimiz bulurken, aynı dakika içerisinde 3 kişinin sorusunada muhattap olabiliyoruz.

#+begin_quote
Hızlı ve ücretsiz iletişim'in gerçek maliyeti, iletişim yükü biriktiren kişilerin ortaya çıkmasına sebep oluyor.
#+end_quote

** Uzaktan çalışmanın soru sormaya etkileri
Aslinda

** Async vs Sync Communication
*** Remote working vs Space Working

** Toptan mı sormalıyız, Perakende mi?
**** Takim'in onceden boyle bir sorunla karsilasmis olma ihtimali
**** Takim'in boyle bir problem haberdar olmasi
**** Sonradan karsilasildigi takdirde

** No Hello Policy.

** Karsi tarafin dusunmesi icin ona vakit tanimak.

** Psikolojik etkisi
Bilmemek ayip degil. Soru soran ve sorulan acisindan bakmak.

** Arastirma araclarini iyi kullanmak

** Eric Steven Raymond'dan
Search Manual, Read Documentation, Get into Source code
Search Web
Search Github Issues
Ask ChatGPT
Experiment

Bunlari yaptigini soru sordugun kisi ile yaptigin dialogda konusmandan hissettir.
Prepare the question.

*** When you ask.
Be sensitive in choosing where you ask your question. You are likely to be ignored, or written off as a loser, if you:
Hackers blow off questions that are inappropriately targeted in order to try to protect their communications channels from being drowned in irrelevance. You don't want this to happen to you.

Dont' shotgun everybody, it is nothing different from yelling.

In general, questions to a well-selected public forum are more likely to get useful answers than equivalent questions to a private one. There are multiple reasons for this. One is simply the size of the pool of potential respondents. Another is the size of the audience; hackers would rather answer questions that educate many people than questions serving only a few.

Use meaningful, specific subject headers

More generally, imagine looking at the index of an archive of questions, with just the subject lines showing. Make your subject line reflect your question well enough that the next person searching the archive with a question similar to yours will be able to follow the thread to an answer rather than posting the question again.

**** Write in clear, grammatical, correctly-spelled language
William Strunk -  The elements of style. "Use the active voice"
https://gutenberg.org/ebooks/37134

**** Send questions in accessible, standard formats
Yalnizca ekran goruntusu gondermek yerine ayni zamanda hata ile ilgili loglari text olarak iletmek.

Be precise and informative about your problem

Describe the symptoms of your problem or bug carefully and clearly.

Describe the environment in which it occurs (machine, OS, application, whatever). Provide your vendor's distribution and release level (e.g.: “Fedora Core 7”, “Slackware 9.1”, etc.).

Describe the research you did to try and understand the problem before you asked the question.

Describe the diagnostic steps you took to try and pin down the problem yourself before you asked the question.

Describe any possibly relevant recent changes in your computer or software configuration.

If at all possible, provide a way to reproduce the problem in a controlled environment.

Do the best you can to anticipate the questions a hacker will ask, and answer them in advance in your request for help.

**** Describe the problem's symptoms, not your guesses

It's not useful to tell hackers what you think is causing your problem. (If your diagnostic theories were such hot stuff, would you be consulting others for help?) So, make sure you're telling them the raw symptoms of what goes wrong, rather than your interpretations and theories. Let them do the interpretation and diagnosis. If you feel it's important to state your guess, clearly label it as such and describe why that answer isn't working for you.

Stupid:

I'm getting back-to-back SIG11 errors on kernel compiles, and suspect a hairline crack on one of the motherboard traces. What's the best way to check for those?
Smart:

My home-built K6/233 on an FIC-PA2007 motherboard (VIA Apollo VP2 chipset) with 256MB Corsair PC133 SDRAM starts getting frequent SIG11 errors about 20 minutes after power-on during the course of kernel compiles, but never in the first 20 minutes. Rebooting doesn't restart the clock, but powering down overnight does. Swapping out all RAM didn't help. The relevant part of a typical compile session log follows.

Since the preceding point seems to be a tough one for many people to grasp, here's a phrase to remind you: "All diagnosticians are from Missouri." That US state's official motto is "Show me" (earned in 1899, when Congressman Willard D. Vandiver said "I come from a country that raises corn and cotton and cockleburs and Democrats, and frothy eloquence neither convinces nor satisfies me. I'm from Missouri. You've got to show me.") In diagnosticians' case, it's not a matter of skepticism, but rather a literal, functional need to see whatever is as close as possible to the same raw evidence that you see, rather than your surmises and summaries. Show us.

**** Describe the goal, not the step

If you are trying to find out how to do something (as opposed to reporting a bug), begin by describing the goal. Only then describe the particular step towards it that you are blocked on.

Often, people who need technical help have a high-level goal in mind and get stuck on what they think is one particular path towards the goal. They come for help with the step, but don't realize that the path is wrong. It can take substantial effort to get past this.

Stupid:

How do I get the color-picker on the FooDraw program to take a hexadecimal RGB value?
Smart:

I'm trying to replace the color table on an image with values of my choosing. Right now the only way I can see to do this is by editing each table slot, but I can't get FooDraw's color picker to take a hexadecimal RGB value.

The second version of the question is smart. It allows an answer that suggests a tool better suited to the task.

**** Don't ask people to reply by private e-mail

Hackers believe solving problems should be a public, transparent process during which a first try at an answer can and should be corrected if someone more knowledgeable notices that it is incomplete or incorrect. Also, helpers get some of their reward for being respondents from being seen to be competent and knowledgeable by their peers.

When you ask for a private reply, you are disrupting both the process and the reward. Don't do this. It's the respondent's choice whether to reply privately — and if he or she does, it's usually because he or she thinks the question is too ill-formed or obvious to be interesting to others.

There is one limited exception to this rule. If you think the question is such that you are likely to get many answers that are all closely similar, then the magic words are “e-mail me and I'll summarize the answers for the group”. It is courteous to try and save the mailing list or newsgroup a flood of substantially identical postings — but you have to keep the promise to summarize.

**** When asking about code

Don't ask others to debug your broken code without giving a hint what sort of problem they should be searching for. Posting a few hundred lines of code, saying "it doesn't work", will get you ignored. Posting a dozen lines of code, saying "after line 7 I was expecting to see <x>, but <y> occurred instead" is much more likely to get you a response.

The most effective way to be precise about a code problem is to provide a minimal bug-demonstrating test case. What's a minimal test case? It's an illustration of the problem; just enough code to exhibit the undesirable behavior and no more. How do you make a minimal test case? If you know what line or section of code is producing the problematic behavior, make a copy of it and add just enough supporting code to produce a complete example (i.e. enough that the source is acceptable to the compiler/interpreter/whatever application processes it). If you can't narrow it down to a particular section, make a copy of the source and start removing chunks that don't affect the problematic behavior. The smaller your minimal test case is, the better (see the section called “Volume is not precision”).

Generating a really small minimal test case will not always be possible, but trying to is good discipline. It may help you learn what you need to solve the problem on your own — and even when it doesn't, hackers like to see that you have tried. It will make them more cooperative.

If you simply want a code review, say as much up front, and be sure to mention what areas you think might particularly need review and why.

**** Courtesy never hurts, and sometimes helps

Be courteous. Use “Please” and “Thanks for your attention” or “Thanks for your consideration”. Make it clear you appreciate the time people spend helping you for free.

To be honest, this isn't as important as (and cannot substitute for) being grammatical, clear, precise and descriptive, avoiding proprietary formats etc.; hackers in general would rather get somewhat brusque but technically sharp bug reports than polite vagueness. (If this puzzles you, remember that we value a question by what it teaches us.)

However, if you've got your technical ducks in a row, politeness does increase your chances of getting a useful answer.

(We must note that the only serious objection we've received from veteran hackers to this HOWTO is with respect to our previous recommendation to use “Thanks in advance”. Some hackers feel this connotes an intention not to thank anybody afterwards. Our recommendation is to either say “Thanks in advance” first and thank respondents afterwards, or express courtesy in a different way, such as by saying “Thanks for your attention” or “Thanks for your consideration”.)

**** Follow up with a brief note on the solution

Send a note after the problem has been solved to all who helped you; let them know how it came out and thank them again for their help. If the problem attracted general interest in a mailing list or newsgroup, it's appropriate to post the followup there.

Optimally, the reply should be to the thread started by the original question posting, and should have ‘FIXED’, ‘RESOLVED’ or an equally obvious tag in the subject line. On mailing lists with fast turnaround, a potential respondent who sees a thread about “Problem X” ending with “Problem X - FIXED” knows not to waste his/her time even reading the thread (unless (s)he personally finds Problem X interesting) and can therefore use that time solving a different problem.

Your followup doesn't have to be long and involved; a simple “Howdy — it was a failed network cable! Thanks, everyone. - Bill” would be better than nothing. In fact, a short and sweet summary is better than a long dissertation unless the solution has real technical depth. Say what action solved the problem, but you need not replay the whole troubleshooting sequence.

For problems with some depth, it is appropriate to post a summary of the troubleshooting history. Describe your final problem statement. Describe what worked as a solution, and indicate avoidable blind alleys after that. The blind alleys should come after the correct solution and other summary material, rather than turning the follow-up into a detective story. Name the names of people who helped you; you'll make friends that way.

Besides being courteous and informative, this sort of followup will help others searching the archive of the mailing-list/newsgroup/forum to know exactly which solution helped you and thus may also help them.

Last, and not least, this sort of followup helps everybody who assisted feel a satisfying sense of closure about the problem. If you are not a techie or hacker yourself, trust us that this feeling is very important to the gurus and experts you tapped for help. Problem narratives that trail off into unresolved nothingness are frustrating things; hackers itch to see them resolved. The goodwill that scratching that itch earns you will be very, very helpful to you next time you need to pose a question.

Consider how you might be able to prevent others from having the same problem in the future. Ask yourself if a documentation or FAQ patch would help, and if the answer is yes send that patch to the maintainer.

Among hackers, this sort of good followup behavior is actually more important than conventional politeness. It's how you get a reputation for playing well with others, which can be a very valuable asset.

**** RTFM
There is an ancient and hallowed tradition: if you get a reply that reads “RTFM”, the person who sent it thinks you should have Read The Fucking Manual. He or she is almost certainly right. Go read it.

RTFM has a younger relative. If you get a reply that reads “STFW”, the person who sent it thinks you should have Searched The Fucking Web. He or she is almost certainly right. Go search it. (The milder version of this is when you are told “Google is your friend!”)


** Lastly
Bu tum yontemler. Aklinizin kosesinde olmasi ve soru sormadan once dusunmeniz gereken.
Hepsini yapmanizda mumkun olmayabilir. Ancak ne kadar saglikli sorular sormak istiyorsaniz o kadar dikkat etmeniz gereken yerler.

** Kaynakça
http://www.catb.org/~esr/faqs/smart-questions.html
